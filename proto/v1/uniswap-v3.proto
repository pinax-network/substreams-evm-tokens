syntax = "proto3";

package evm.tokens.uniswap.v3;

message Events {
  repeated Swap swaps = 1;
  repeated Initialize intializes = 2;
  repeated PoolCreated pools_created = 3;
}

/**
 * In Uniswap v3, the `PoolCreated` event is emitted when a new liquidity pool is deployed by the factory,
 * providing key parameters for the poolâ€™s configuration; for example, if a pool is established for USDC and USDT
 * with a fee tier of 3000 (equating to a 0.30% fee) and a tick spacing of 60, the event will log the addresses for
 * token0 and token1 (USDC and USDT, respectively), the fee of 3000, the tick spacing of 60, and the address of the
 * newly created pool contract, thereby enabling users and applications to track and interact with the new pool.
 */

message PoolCreated {
  // -- transaction --
  bytes tx_hash = 1;

  // -- call --
  optional bytes caller = 2;

  // -- log --
  bytes contract = 3; // log.address (factory)
  uint64 ordinal = 4; // log.ordinal

  // -- event --
  bytes token0 = 21;
  bytes token1 = 22;
  bytes pool = 23;
  int32 tick_spacing = 24; // int24 (e.g., 60)
  uint64 fee = 25; // uint24 (e.g., 3000 represents 0.30%)
}

/**
 * In Uniswap v3, the `initialize` function is a crucial setup step that configures a newly deployed pool
 * by setting its initial square root price (`sqrtPriceX96`) and corresponding tick value.
 * After the pool is created via the `PoolCreated` event, calling `initialize` establishes the starting price
 * and essential parameters, thereby enabling the pool to process swaps and support liquidity provisioning.
 * Without this initialization, the pool remains unconfigured and cannot operate properly.
 */
message Initialize {
  // -- transaction --
  bytes tx_hash = 1;

  // -- call --
  optional bytes caller = 2;

  // -- log --
  bytes contract = 3; // log.address
  uint64 ordinal = 4; // log.ordinal

  // -- event --
  string sqrt_price_x96 = 21; // uint160
  int32 tick = 22; // int24
}

/**
 * In Uniswap v3, the `Swap` event is emitted when a trade occurs in a liquidity pool.
 * It provides key details of the swap, including the address of the sender initiating the swap,
 * the recipient of the swapped tokens, and the amounts of token0 and token1 involved in the trade.
 * Additionally, the event logs updated state parameters such as the square root price (`sqrtPriceX96`),
 * current liquidity, and the tick after the swap, thereby reflecting the pool's state changes.
 * This event is essential for on-chain tracking of trades, liquidity dynamics, and price updates.
 *
 * Price Calculation:
 * Uniswap V3 represents the current pool price using a square root price value, `sqrtPriceX96`,
 * stored as a Q64.96 fixed-point number (with 64 bits for the integer part and 96 bits for the fraction).
 * To compute the actual price of token0 in terms of token1, the value is squared and then divided by 2^192:
 *
 *      price = (sqrtPriceX96 * sqrtPriceX96) / 2^192
 *
 * Conversely, to determine the price of token1 in terms of token0, take the reciprocal of the computed price.
 *
 * This calculation method provides high precision and efficient on-chain computation of price ratios.
 */
message Swap {
  // -- transaction --
  bytes tx_hash = 1;

  // -- call --
  optional bytes caller = 2;

  // -- log --
  bytes contract = 3; // log.address
  uint64 ordinal = 4; // log.ordinal

  // -- swap --
  bytes sender = 21; // address
  bytes recipient = 22; // address
  string amount0 = 23; // int256
  string amount1 = 24; // int256
  string sqrt_price_x96 = 25; // uint160
  string liquidity = 26; // uint128
  int32 tick = 27; // int24
}
