// @generated
// This file is @generated by prost-build.
/// <https://github.com/Uniswap/v4-core/blob/main/src/interfaces/IPoolManager.sol>
/// <https://github.com/Uniswap/v4-core/blob/59d3ecf53afa9264a16bba0e38f4c5d2231f80bc/src/interfaces/IProtocolFees.sol>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// IPoolManager
    #[prost(message, repeated, tag="1")]
    pub swap: ::prost::alloc::vec::Vec<Swap>,
    #[prost(message, repeated, tag="2")]
    pub intialize: ::prost::alloc::vec::Vec<Initialize>,
    #[prost(message, repeated, tag="3")]
    pub modify_liquidity: ::prost::alloc::vec::Vec<ModifyLiquidity>,
    #[prost(message, repeated, tag="4")]
    pub donate: ::prost::alloc::vec::Vec<Donate>,
    /// IProtocolFees
    #[prost(message, repeated, tag="5")]
    pub protocol_fee_controller_updated: ::prost::alloc::vec::Vec<ProtocolFeeControllerUpdated>,
    #[prost(message, repeated, tag="6")]
    pub protocol_fee_updated: ::prost::alloc::vec::Vec<ProtocolFeeUpdated>,
}
/// / @notice Emitted when a new pool is initialized
/// / @param id The abi encoded hash of the pool key struct for the new pool
/// / @param currency0 The first currency of the pool by address sort order
/// / @param currency1 The second currency of the pool by address sort order
/// / @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
/// / @param tickSpacing The minimum number of ticks between initialized ticks
/// / @param hooks The hooks contract address for the pool, or address(0) if none
/// / @param sqrtPriceX96 The price of the pool on initialization
/// / @param tick The initial tick of the pool corresponding to the initialized price
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Initialize {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address (Pool ID)
    #[prost(bytes="vec", tag="10")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    /// address (token0)
    #[prost(bytes="vec", tag="11")]
    pub currency0: ::prost::alloc::vec::Vec<u8>,
    /// address (token1)
    #[prost(bytes="vec", tag="12")]
    pub currency1: ::prost::alloc::vec::Vec<u8>,
    /// uint24 (e.g., 3000 represents 0.30%)
    #[prost(uint64, tag="13")]
    pub fee: u64,
    /// int24 (e.g., 60)
    #[prost(int32, tag="14")]
    pub tick_spacing: i32,
    /// NOT IMPLEMENTED
    #[prost(string, optional, tag="15")]
    pub hooks: ::core::option::Option<::prost::alloc::string::String>,
    /// uint160
    #[prost(string, tag="17")]
    pub sqrt_price_x96: ::prost::alloc::string::String,
    /// int24
    #[prost(int32, tag="18")]
    pub tick: i32,
}
/// / @notice Emitted for swaps between currency0 and currency1
/// / @param id The abi encoded hash of the pool key struct for the pool that was modified
/// / @param sender The address that initiated the swap call, and that received the callback
/// / @param amount0 The delta of the currency0 balance of the pool
/// / @param amount1 The delta of the currency1 balance of the pool
/// / @param sqrtPriceX96 The sqrt(price) of the pool after the swap, as a Q64.96
/// / @param liquidity The liquidity of the pool after the swap
/// / @param tick The log base 1.0001 of the price of the pool after the swap
/// / @param fee The swap fee in hundredths of a bip
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Swap {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// tx.from
    #[prost(bytes="vec", tag="2")]
    pub tx_from: ::prost::alloc::vec::Vec<u8>,
    /// tx.to
    #[prost(bytes="vec", tag="3")]
    pub tx_to: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="4")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="5")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="6")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address (Pool ID)
    #[prost(bytes="vec", tag="10")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// int256
    #[prost(string, tag="13")]
    pub amount0: ::prost::alloc::string::String,
    /// int256
    #[prost(string, tag="14")]
    pub amount1: ::prost::alloc::string::String,
    /// uint160
    #[prost(string, tag="15")]
    pub sqrt_price_x96: ::prost::alloc::string::String,
    /// uint128
    #[prost(string, tag="16")]
    pub liquidity: ::prost::alloc::string::String,
    /// int24
    #[prost(int32, tag="17")]
    pub tick: i32,
    /// int256
    #[prost(string, tag="18")]
    pub fee: ::prost::alloc::string::String,
}
/// / @notice Emitted when a liquidity position is modified
/// / @param id The abi encoded hash of the pool key struct for the pool that was modified
/// / @param sender The address that modified the pool
/// / @param tickLower The lower tick of the position
/// / @param tickUpper The upper tick of the position
/// / @param liquidityDelta The amount of liquidity that was added or removed
/// / @param salt The extra data to make positions unique
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ModifyLiquidity {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address (Pool ID)
    #[prost(bytes="vec", tag="10")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// int24
    #[prost(int32, tag="12")]
    pub tick_lower: i32,
    /// int24
    #[prost(int32, tag="13")]
    pub tick_upper: i32,
    /// int128
    #[prost(string, tag="14")]
    pub liquidity_delta: ::prost::alloc::string::String,
    /// bytes32
    #[prost(bytes="vec", tag="18")]
    pub salt: ::prost::alloc::vec::Vec<u8>,
}
/// / @notice Emitted for donations
/// / @param id The abi encoded hash of the pool key struct for the pool that was donated to
/// / @param sender The address that initiated the donate call
/// / @param amount0 The amount donated in currency0
/// / @param amount1 The amount donated in currency1
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Donate {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address (Pool ID)
    #[prost(bytes="vec", tag="10")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="12")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="13")]
    pub amount1: ::prost::alloc::string::String,
}
/// / @notice Emitted when the protocol fee controller address is updated in setProtocolFeeController.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProtocolFeeControllerUpdated {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub protocol_fee_controller: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProtocolFeeUpdated {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address (Pool ID)
    #[prost(bytes="vec", tag="10")]
    pub id: ::prost::alloc::vec::Vec<u8>,
    /// uint24
    #[prost(uint64, tag="11")]
    pub protocol_fee: u64,
}
// @@protoc_insertion_point(module)
