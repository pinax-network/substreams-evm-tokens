// @generated
// This file is @generated by prost-build.
/// <https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Pair.sol>
/// <https://github.com/Uniswap/v2-core/blob/master/contracts/UniswapV2Factory.sol>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// UniswapV2Pair
    #[prost(message, repeated, tag="1")]
    pub swap: ::prost::alloc::vec::Vec<Swap>,
    #[prost(message, repeated, tag="2")]
    pub sync: ::prost::alloc::vec::Vec<Sync>,
    #[prost(message, repeated, tag="3")]
    pub mint: ::prost::alloc::vec::Vec<Mint>,
    #[prost(message, repeated, tag="4")]
    pub burn: ::prost::alloc::vec::Vec<Burn>,
    /// UniswapV2Factory
    #[prost(message, repeated, tag="5")]
    pub pair_created: ::prost::alloc::vec::Vec<PairCreated>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PairCreated {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address (factory)
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub token0: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub token1: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="12")]
    pub pair: ::prost::alloc::vec::Vec<u8>,
    /// total number of pairs created
    #[prost(uint64, tag="13")]
    pub all_pairs_length: u64,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Sync {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint112
    #[prost(string, tag="21")]
    pub reserve0: ::prost::alloc::string::String,
    /// uint112
    #[prost(string, tag="22")]
    pub reserve1: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Swap {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="11")]
    pub amount0_in: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub amount0_out: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="13")]
    pub amount1_in: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="14")]
    pub amount1_out: ::prost::alloc::string::String,
    /// address
    #[prost(bytes="vec", tag="15")]
    pub to: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mint {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="11")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub amount1: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Burn {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="11")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="12")]
    pub amount1: ::prost::alloc::string::String,
    /// address
    #[prost(bytes="vec", tag="13")]
    pub to: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
