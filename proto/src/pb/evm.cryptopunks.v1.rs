// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// "mint"
    #[prost(message, repeated, tag="1")]
    pub assigns: ::prost::alloc::vec::Vec<Assign>,
    #[prost(message, repeated, tag="2")]
    pub punk_transfers: ::prost::alloc::vec::Vec<PunkTransfer>,
    /// "transfer" via sale
    #[prost(message, repeated, tag="3")]
    pub punk_boughts: ::prost::alloc::vec::Vec<PunkBought>,
    #[prost(message, repeated, tag="4")]
    pub punk_offereds: ::prost::alloc::vec::Vec<PunkOffered>,
    #[prost(message, repeated, tag="5")]
    pub punk_bid_entereds: ::prost::alloc::vec::Vec<PunkBidEntered>,
    #[prost(message, repeated, tag="6")]
    pub punk_bid_withdrawns: ::prost::alloc::vec::Vec<PunkBidWithdrawn>,
    /// ‚ùå excludes `Transfer` since it is a duplicate event of ERC-20
    #[prost(message, repeated, tag="7")]
    pub punk_no_longer_for_sales: ::prost::alloc::vec::Vec<PunkNoLongerForSale>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Assign {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="11")]
    pub punk_index: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkTransfer {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="12")]
    pub punk_index: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkBought {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="10")]
    pub punk_index: ::prost::alloc::string::String,
    /// uint256 (<https://github.com/pinax-network/substreams-evm-nfts/issues/1>)
    #[prost(string, optional, tag="11")]
    pub value: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(bytes="vec", tag="12")]
    pub from_address: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="13")]
    pub to_address: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkBidEntered {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="10")]
    pub punk_index: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub value: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="12")]
    pub from_address: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkBidWithdrawn {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="10")]
    pub punk_index: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub value: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="12")]
    pub from_address: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkNoLongerForSale {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="10")]
    pub punk_index: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PunkOffered {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint256
    #[prost(string, tag="10")]
    pub punk_index: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub min_value: ::prost::alloc::string::String,
    #[prost(bytes="vec", tag="12")]
    pub to_address: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
