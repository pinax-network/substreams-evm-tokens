// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transfers: ::prost::alloc::vec::Vec<Transfer>,
    #[prost(message, repeated, tag="2")]
    pub approvals: ::prost::alloc::vec::Vec<Approval>,
    #[prost(message, repeated, tag="3")]
    pub approvals_for_all: ::prost::alloc::vec::Vec<ApprovalForAll>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EventsMetadata {
    #[prost(message, repeated, tag="1")]
    pub metadatas: ::prost::alloc::vec::Vec<Metadata>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Metadata {
    /// log.address
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="2")]
    pub token_id: ::prost::alloc::string::String,
    /// ERC721 Metadata
    /// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC721/extensions/IERC721Metadata.sol>
    ///
    /// 0xc87b56dd: tokenURI(uint256 tokenId) -> string
    #[prost(string, optional, tag="3")]
    pub uri: ::core::option::Option<::prost::alloc::string::String>,
    /// 0x95d89b41: symbol() -> string
    #[prost(string, optional, tag="4")]
    pub symbol: ::core::option::Option<::prost::alloc::string::String>,
    /// 0x61a4422b: name() -> string
    #[prost(string, optional, tag="5")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// 0x6c0360eb: baseURI() -> string
    #[prost(string, optional, tag="6")]
    pub base_uri: ::core::option::Option<::prost::alloc::string::String>,
    /// 0x18160ddd: totalSupply() -> uint256
    #[prost(string, optional, tag="7")]
    pub total_supply: ::core::option::Option<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Transfer {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// The person that sent the transfer.
    #[prost(bytes="vec", tag="10")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    /// The person that received the transfer.
    #[prost(bytes="vec", tag="11")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    /// TokenID the identifier of the token for which the transfer is happening.
    #[prost(string, tag="12")]
    pub token_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Approval {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub approved: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="12")]
    pub token_id: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApprovalForAll {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    /// true/false
    #[prost(bool, tag="12")]
    pub approved: bool,
}
// @@protoc_insertion_point(module)
