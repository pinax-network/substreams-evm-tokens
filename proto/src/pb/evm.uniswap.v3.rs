// @generated
// This file is @generated by prost-build.
/// <https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Factory.sol>
/// <https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/IUniswapV3Pool.sol>
/// <https://github.com/Uniswap/v3-core/blob/main/contracts/interfaces/pool/IUniswapV3PoolEvents.sol>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// IUniswapV3Pool
    #[prost(message, repeated, tag="1")]
    pub swap: ::prost::alloc::vec::Vec<Swap>,
    #[prost(message, repeated, tag="2")]
    pub intialize: ::prost::alloc::vec::Vec<Initialize>,
    #[prost(message, repeated, tag="3")]
    pub mint: ::prost::alloc::vec::Vec<Mint>,
    #[prost(message, repeated, tag="4")]
    pub collect: ::prost::alloc::vec::Vec<Collect>,
    #[prost(message, repeated, tag="5")]
    pub burn: ::prost::alloc::vec::Vec<Burn>,
    #[prost(message, repeated, tag="6")]
    pub flash: ::prost::alloc::vec::Vec<Flash>,
    #[prost(message, repeated, tag="7")]
    pub increase_observation_cardinality_next: ::prost::alloc::vec::Vec<IncreaseObservationCardinalityNext>,
    #[prost(message, repeated, tag="8")]
    pub set_fee_protocol: ::prost::alloc::vec::Vec<SetFeeProtocol>,
    #[prost(message, repeated, tag="9")]
    pub collect_protocol: ::prost::alloc::vec::Vec<CollectProtocol>,
    /// IUniswapV3Factory
    #[prost(message, repeated, tag="10")]
    pub pool_created: ::prost::alloc::vec::Vec<PoolCreated>,
    #[prost(message, repeated, tag="11")]
    pub owner_changed: ::prost::alloc::vec::Vec<OwnerChanged>,
    #[prost(message, repeated, tag="12")]
    pub fee_amount_enabled: ::prost::alloc::vec::Vec<FeeAmountEnabled>,
}
// *
// In Uniswap v3, the `PoolCreated` event is emitted when a new liquidity pool is deployed by the factory,
// providing key parameters for the poolâ€™s configuration; for example, if a pool is established for USDC and USDT
// with a fee tier of 3000 (equating to a 0.30% fee) and a tick spacing of 60, the event will log the addresses for
// token0 and token1 (USDC and USDT, respectively), the fee of 3000, the tick spacing of 60, and the address of the
// newly created pool contract, thereby enabling users and applications to track and interact with the new pool.

/// / @notice Emitted when a pool is created
/// / @param token0 The first token of the pool by address sort order
/// / @param token1 The second token of the pool by address sort order
/// / @param fee The fee collected upon every swap in the pool, denominated in hundredths of a bip
/// / @param tickSpacing The minimum number of ticks between initialized ticks
/// / @param pool The address of the created pool
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PoolCreated {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address (factory)
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(bytes="vec", tag="10")]
    pub token0: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="11")]
    pub token1: ::prost::alloc::vec::Vec<u8>,
    /// uint24 (e.g., 3000 represents 0.30%)
    #[prost(uint64, tag="12")]
    pub fee: u64,
    /// int24 (e.g., 60)
    #[prost(int32, tag="13")]
    pub tick_spacing: i32,
    /// address
    #[prost(bytes="vec", tag="14")]
    pub pool: ::prost::alloc::vec::Vec<u8>,
}
/// *
/// In Uniswap v3, the `initialize` function is a crucial setup step that configures a newly deployed pool
/// by setting its initial square root price (`sqrtPriceX96`) and corresponding tick value.
/// After the pool is created via the `PoolCreated` event, calling `initialize` establishes the starting price
/// and essential parameters, thereby enabling the pool to process swaps and support liquidity provisioning.
/// Without this initialization, the pool remains unconfigured and cannot operate properly.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Initialize {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint160
    #[prost(string, tag="21")]
    pub sqrt_price_x96: ::prost::alloc::string::String,
    /// int24
    #[prost(int32, tag="22")]
    pub tick: i32,
}
/// *
/// In Uniswap v3, the `Swap` event is emitted when a trade occurs in a liquidity pool.
/// It provides key details of the swap, including the address of the sender initiating the swap,
/// the recipient of the swapped tokens, and the amounts of token0 and token1 involved in the trade.
/// Additionally, the event logs updated state parameters such as the square root price (`sqrtPriceX96`),
/// current liquidity, and the tick after the swap, thereby reflecting the pool's state changes.
/// This event is essential for on-chain tracking of trades, liquidity dynamics, and price updates.
///
/// Price Calculation:
/// Uniswap V3 represents the current pool price using a square root price value, `sqrtPriceX96`,
/// stored as a Q64.96 fixed-point number (with 64 bits for the integer part and 96 bits for the fraction).
/// To compute the actual price of token0 in terms of token1, the value is squared and then divided by 2^192:
///
///       price = (sqrtPriceX96 * sqrtPriceX96) / 2^192
///
/// Conversely, to determine the price of token1 in terms of token0, take the reciprocal of the computed price.
///
/// This calculation method provides high precision and efficient on-chain computation of price ratios.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Swap {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="21")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="22")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// int256
    #[prost(string, tag="23")]
    pub amount0: ::prost::alloc::string::String,
    /// int256
    #[prost(string, tag="24")]
    pub amount1: ::prost::alloc::string::String,
    /// uint160
    #[prost(string, tag="25")]
    pub sqrt_price_x96: ::prost::alloc::string::String,
    /// uint128
    #[prost(string, tag="26")]
    pub liquidity: ::prost::alloc::string::String,
    /// int24
    #[prost(int32, tag="27")]
    pub tick: i32,
}
/// / @notice Emitted when the owner of the factory is changed
/// / @param oldOwner The owner before the owner was changed
/// / @param newOwner The owner after the owner was changed
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OwnerChanged {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub old_owner: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub new_owner: ::prost::alloc::vec::Vec<u8>,
}
/// / @notice Emitted when a new fee amount is enabled for pool creation via the factory
/// / @param fee The enabled fee, denominated in hundredths of a bip
/// / @param tickSpacing The minimum number of ticks between initialized ticks for pools created with the given fee
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FeeAmountEnabled {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint24
    #[prost(uint64, tag="10")]
    pub fee: u64,
    /// int24
    #[prost(int32, tag="11")]
    pub tick_spacing: i32,
}
/// / @notice Emitted when liquidity is minted for a given position
/// / @param sender The address that minted the liquidity
/// / @param owner The owner of the position and recipient of any minted liquidity
/// / @param tickLower The lower tick of the position
/// / @param tickUpper The upper tick of the position
/// / @param amount The amount of liquidity minted to the position range
/// / @param amount0 How much token0 was required for the minted liquidity
/// / @param amount1 How much token1 was required for the minted liquidity
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Mint {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// int24
    #[prost(int32, tag="12")]
    pub tick_lower: i32,
    /// int24
    #[prost(int32, tag="13")]
    pub tick_upper: i32,
    /// uint128
    #[prost(string, tag="14")]
    pub amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="15")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="16")]
    pub amount1: ::prost::alloc::string::String,
}
/// / @notice Emitted when fees are collected by the owner of a position
/// / @dev Collect events may be emitted with zero amount0 and amount1 when the caller chooses not to collect fees
/// / @param owner The owner of the position for which fees are collected
/// / @param tickLower The lower tick of the position
/// / @param tickUpper The upper tick of the position
/// / @param amount0 The amount of token0 fees collected
/// / @param amount1 The amount of token1 fees collected
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Collect {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// int24
    #[prost(int32, tag="12")]
    pub tick_lower: i32,
    /// int24
    #[prost(int32, tag="13")]
    pub tick_upper: i32,
    /// uint128
    #[prost(string, tag="14")]
    pub amount0: ::prost::alloc::string::String,
    /// uint128
    #[prost(string, tag="15")]
    pub amount1: ::prost::alloc::string::String,
}
/// / @notice Emitted when a position's liquidity is removed
/// / @dev Does not withdraw any fees earned by the liquidity position, which must be withdrawn via #collect
/// / @param owner The owner of the position for which liquidity is removed
/// / @param tickLower The lower tick of the position
/// / @param tickUpper The upper tick of the position
/// / @param amount The amount of liquidity to remove
/// / @param amount0 The amount of token0 withdrawn
/// / @param amount1 The amount of token1 withdrawn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Burn {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// int24
    #[prost(int32, tag="11")]
    pub tick_lower: i32,
    /// int24
    #[prost(int32, tag="12")]
    pub tick_upper: i32,
    /// uint128
    #[prost(string, tag="13")]
    pub amount: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="14")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="15")]
    pub amount1: ::prost::alloc::string::String,
}
/// / @notice Emitted by the pool for any flashes of token0/token1
/// / @param sender The address that initiated the swap call, and that received the callback
/// / @param recipient The address that received the tokens from flash
/// / @param amount0 The amount of token0 that was flashed
/// / @param amount1 The amount of token1 that was flashed
/// / @param paid0 The amount of token0 paid for the flash, which can exceed the amount0 plus the fee
/// / @param paid1 The amount of token1 paid for the flash, which can exceed the amount1 plus the fee
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Flash {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="12")]
    pub amount0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="13")]
    pub amount1: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="14")]
    pub paid0: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="15")]
    pub paid1: ::prost::alloc::string::String,
}
/// / @notice Emitted by the pool for increases to the number of observations that can be stored
/// / @dev observationCardinalityNext is not the observation cardinality until an observation is written at the index
/// / just before a mint/swap/burn.
/// / @param observationCardinalityNextOld The previous value of the next observation cardinality
/// / @param observationCardinalityNextNew The updated value of the next observation cardinality
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IncreaseObservationCardinalityNext {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint16
    #[prost(uint64, tag="10")]
    pub observation_cardinality_next_old: u64,
    /// uint16
    #[prost(uint64, tag="11")]
    pub observation_cardinality_next_new: u64,
}
/// / @notice Emitted when the protocol fee is changed by the pool
/// / @param feeProtocol0Old The previous value of the token0 protocol fee
/// / @param feeProtocol1Old The previous value of the token1 protocol fee
/// / @param feeProtocol0New The updated value of the token0 protocol fee
/// / @param feeProtocol1New The updated value of the token1 protocol fee
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SetFeeProtocol {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// uint8
    #[prost(uint64, tag="10")]
    pub fee_protocol0_old: u64,
    /// uint8
    #[prost(uint64, tag="11")]
    pub fee_protocol1_old: u64,
    /// uint8
    #[prost(uint64, tag="12")]
    pub fee_protocol0_new: u64,
    /// uint8
    #[prost(uint64, tag="13")]
    pub fee_protocol1_new: u64,
}
/// / @notice Emitted when the collected protocol fees are withdrawn by the factory owner
/// / @param sender The address that collects the protocol fees
/// / @param recipient The address that receives the collected protocol fees
/// / @param amount0 The amount of token0 protocol fees that is withdrawn
/// / @param amount0 The amount of token1 protocol fees that is withdrawn
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CollectProtocol {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub sender: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// uint128
    #[prost(string, tag="12")]
    pub amount0: ::prost::alloc::string::String,
    /// uint128
    #[prost(string, tag="13")]
    pub amount1: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
