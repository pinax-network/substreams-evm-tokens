// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub order_fulfilled: ::prost::alloc::vec::Vec<OrderFulfilled>,
    #[prost(message, repeated, tag="2")]
    pub orders_matched: ::prost::alloc::vec::Vec<OrdersMatched>,
    #[prost(message, repeated, tag="3")]
    pub order_cancelled: ::prost::alloc::vec::Vec<OrderCancelled>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderFulfilled {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// hash
    #[prost(bytes="vec", tag="10")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub offerer: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="12")]
    pub zone: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="13")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
    /// NFT offer
    #[prost(message, repeated, tag="14")]
    pub offer: ::prost::alloc::vec::Vec<Offer>,
    /// offerer, fee, collection fee
    #[prost(message, repeated, tag="15")]
    pub consideration: ::prost::alloc::vec::Vec<Consideration>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrdersMatched {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// hash\[\]
    #[prost(bytes="vec", repeated, tag="10")]
    pub order_hashes: ::prost::alloc::vec::Vec<::prost::alloc::vec::Vec<u8>>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Offer {
    /// uint8
    #[prost(uint32, tag="1")]
    pub item_type: u32,
    /// address (NFT token contract)
    #[prost(bytes="vec", tag="2")]
    pub token: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="3")]
    pub identifier: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="4")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Consideration {
    /// uint8
    #[prost(uint32, tag="1")]
    pub item_type: u32,
    /// address (ETH=0x0000000000000000000000000000000000000000)
    #[prost(bytes="vec", tag="2")]
    pub token: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="3")]
    pub identifier: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="4")]
    pub amount: ::prost::alloc::string::String,
    /// address
    #[prost(bytes="vec", tag="5")]
    pub recipient: ::prost::alloc::vec::Vec<u8>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct OrderCancelled {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- call --
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// hash
    #[prost(bytes="vec", tag="10")]
    pub order_hash: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub offerer: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="12")]
    pub zone: ::prost::alloc::vec::Vec<u8>,
}
// @@protoc_insertion_point(module)
