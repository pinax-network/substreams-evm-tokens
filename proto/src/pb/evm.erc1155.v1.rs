// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    #[prost(message, repeated, tag="1")]
    pub transfers_single: ::prost::alloc::vec::Vec<TransferSingle>,
    #[prost(message, repeated, tag="2")]
    pub transfers_batch: ::prost::alloc::vec::Vec<TransferBatch>,
    #[prost(message, repeated, tag="3")]
    pub approvals_for_all: ::prost::alloc::vec::Vec<ApprovalForAll>,
    #[prost(message, repeated, tag="4")]
    pub uris: ::prost::alloc::vec::Vec<Uri>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferSingle {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="12")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    /// uint256
    #[prost(string, tag="13")]
    pub id: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="14")]
    pub value: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TransferBatch {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub from: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="12")]
    pub to: ::prost::alloc::vec::Vec<u8>,
    /// uint256\[\]
    #[prost(string, repeated, tag="13")]
    pub ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// uint256\[\]
    #[prost(string, repeated, tag="14")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ApprovalForAll {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    ///
    /// address
    #[prost(bytes="vec", tag="10")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// address
    #[prost(bytes="vec", tag="11")]
    pub operator: ::prost::alloc::vec::Vec<u8>,
    /// true/false
    #[prost(bool, tag="12")]
    pub approved: bool,
}
/// ERC1155 Metadata
/// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol>
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Uri {
    /// -- transaction --
    #[prost(bytes="vec", tag="1")]
    pub tx_hash: ::prost::alloc::vec::Vec<u8>,
    /// -- caller --
    ///
    /// call.caller (only available in Extended blocks)
    #[prost(bytes="vec", optional, tag="2")]
    pub caller: ::core::option::Option<::prost::alloc::vec::Vec<u8>>,
    /// -- log --
    ///
    /// log.address
    #[prost(bytes="vec", tag="3")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    /// log.ordinal
    #[prost(uint64, tag="4")]
    pub ordinal: u64,
    /// -- event --
    #[prost(string, tag="10")]
    pub value: ::prost::alloc::string::String,
    /// uint256
    #[prost(string, tag="11")]
    pub id: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
