// @generated
// This file is @generated by prost-build.
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Events {
    /// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/e34251682bac9c3252af30e91e999f13dd098b9f/contracts/token/ERC20/IERC20.sol#L32>
    #[prost(message, repeated, tag="4")]
    pub balances_by_account: ::prost::alloc::vec::Vec<BalanceByAccount>,
    /// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/master/contracts/token/ERC20/extensions/IERC20Permit.sol>
    #[prost(message, repeated, tag="2")]
    pub permits_by_owner: ::prost::alloc::vec::Vec<PermitByOwner>,
    /// <https://github.com/OpenZeppelin/openzeppelin-contracts/blob/e34251682bac9c3252af30e91e999f13dd098b9f/contracts/token/ERC20/IERC20.sol#L50>
    #[prost(message, repeated, tag="3")]
    pub allowances_by_owner_spender: ::prost::alloc::vec::Vec<AllowanceByOwnerSpender>,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct BalanceByAccount {
    /// log.address
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub account: ::prost::alloc::vec::Vec<u8>,
    /// balanceOf(address account) -> uint256
    #[prost(string, tag="3")]
    pub amount: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct PermitByOwner {
    /// log.address
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    /// nonces(address owner) -> uint256
    #[prost(string, tag="3")]
    pub nonces: ::prost::alloc::string::String,
}
#[allow(clippy::derive_partial_eq_without_eq)]
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct AllowanceByOwnerSpender {
    /// log.address
    #[prost(bytes="vec", tag="1")]
    pub contract: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="2")]
    pub owner: ::prost::alloc::vec::Vec<u8>,
    #[prost(bytes="vec", tag="3")]
    pub spender: ::prost::alloc::vec::Vec<u8>,
    /// allowance(address owner, address spender) -> uint256
    #[prost(string, tag="4")]
    pub allowance: ::prost::alloc::string::String,
}
// @@protoc_insertion_point(module)
